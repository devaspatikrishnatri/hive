PREHOOK: query: CREATE TABLE DUP_TEST (id int , in_date timestamp , sample varchar(100)) stored as orc tblproperties('transactional'='true', 'transactional_properties'='default')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DUP_TEST
POSTHOOK: query: CREATE TABLE DUP_TEST (id int , in_date timestamp , sample varchar(100)) stored as orc tblproperties('transactional'='true', 'transactional_properties'='default')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DUP_TEST
PREHOOK: query: CREATE TABLE DUP_TEST_TARGET (id int , in_date timestamp , sample varchar(100)) CLUSTERED by (ID) INTO 5 BUCKETS STORED AS ORC tblproperties('transactional'='true', 'transactional_properties'='default')
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DUP_TEST_TARGET
POSTHOOK: query: CREATE TABLE DUP_TEST_TARGET (id int , in_date timestamp , sample varchar(100)) CLUSTERED by (ID) INTO 5 BUCKETS STORED AS ORC tblproperties('transactional'='true', 'transactional_properties'='default')
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DUP_TEST_TARGET
PREHOOK: query: INSERT INTO DUP_TEST
(id , in_date , sample)
values
(1  , '2023-04-14 10:11:12.111' , 'test1'),
(2  , '2023-04-14 10:11:12.111' , 'test2'),
(3  , '2023-04-14 10:11:12.111' , 'test3'),
(4  , '2023-04-14 10:11:12.111' , 'test4'),
(5  , '2023-04-14 10:11:12.111' , 'test5'),
(6  , '2023-04-14 10:11:12.111' , 'test6'),
(7  , '2023-04-14 10:11:12.111' , 'test7'),
(8  , '2023-04-14 10:11:12.111' , 'test8'),
(9  , '2023-04-14 10:11:12.111' , 'test9')
PREHOOK: type: QUERY
PREHOOK: Input: _dummy_database@_dummy_table
PREHOOK: Output: default@dup_test
POSTHOOK: query: INSERT INTO DUP_TEST
(id , in_date , sample)
values
(1  , '2023-04-14 10:11:12.111' , 'test1'),
(2  , '2023-04-14 10:11:12.111' , 'test2'),
(3  , '2023-04-14 10:11:12.111' , 'test3'),
(4  , '2023-04-14 10:11:12.111' , 'test4'),
(5  , '2023-04-14 10:11:12.111' , 'test5'),
(6  , '2023-04-14 10:11:12.111' , 'test6'),
(7  , '2023-04-14 10:11:12.111' , 'test7'),
(8  , '2023-04-14 10:11:12.111' , 'test8'),
(9  , '2023-04-14 10:11:12.111' , 'test9')
POSTHOOK: type: QUERY
POSTHOOK: Input: _dummy_database@_dummy_table
POSTHOOK: Output: default@dup_test
POSTHOOK: Lineage: dup_test.id SCRIPT []
POSTHOOK: Lineage: dup_test.in_date SCRIPT []
POSTHOOK: Lineage: dup_test.sample SCRIPT []
PREHOOK: query: MERGE INTO DUP_TEST_TARGET T USING (SELECT id , in_date , sample FROM (SELECT id , in_date , sample ,ROW_NUMBER()
OVER(PARTITION BY id ORDER BY in_date DESC ) AS ROW_NUMB  FROM DUP_TEST) OUTQUERY WHERE ROW_NUMB =1) as S ON T.id = S.id
    WHEN MATCHED THEN UPDATE SET  in_date = S.in_date , sample = S.sample
    WHEN NOT MATCHED THEN INSERT VALUES (S.id, S.in_date , S.sample)
PREHOOK: type: QUERY
PREHOOK: Input: default@dup_test
PREHOOK: Input: default@dup_test_target
PREHOOK: Output: default@dup_test_target
PREHOOK: Output: default@dup_test_target
PREHOOK: Output: default@merge_tmp_table
POSTHOOK: query: MERGE INTO DUP_TEST_TARGET T USING (SELECT id , in_date , sample FROM (SELECT id , in_date , sample ,ROW_NUMBER()
OVER(PARTITION BY id ORDER BY in_date DESC ) AS ROW_NUMB  FROM DUP_TEST) OUTQUERY WHERE ROW_NUMB =1) as S ON T.id = S.id
    WHEN MATCHED THEN UPDATE SET  in_date = S.in_date , sample = S.sample
    WHEN NOT MATCHED THEN INSERT VALUES (S.id, S.in_date , S.sample)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dup_test
POSTHOOK: Input: default@dup_test_target
POSTHOOK: Output: default@dup_test_target
POSTHOOK: Output: default@dup_test_target
POSTHOOK: Output: default@merge_tmp_table
POSTHOOK: Lineage: dup_test_target.id SIMPLE [(dup_test)dup_test.FieldSchema(name:id, type:int, comment:null), ]
POSTHOOK: Lineage: dup_test_target.in_date SIMPLE [(dup_test)dup_test.FieldSchema(name:in_date, type:timestamp, comment:null), ]
POSTHOOK: Lineage: dup_test_target.sample SIMPLE [(dup_test)dup_test.FieldSchema(name:sample, type:varchar(100), comment:null), ]
POSTHOOK: Lineage: merge_tmp_table.val EXPRESSION [(dup_test_target)t.FieldSchema(name:ROW__ID, type:struct<writeId:bigint,bucketId:int,rowId:bigint>, comment:), ]
PREHOOK: query: explain vectorization detail select * from DUP_TEST_TARGET T join (SELECT id , in_date , sample FROM (SELECT id , in_date , sample ,ROW_NUMBER()
OVER(PARTITION BY id ORDER BY in_date DESC ) AS ROW_NUMB  FROM DUP_TEST) OUTQUERY WHERE ROW_NUMB =1) as S ON T.id = S.id
PREHOOK: type: QUERY
PREHOOK: Input: default@dup_test
PREHOOK: Input: default@dup_test_target
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain vectorization detail select * from DUP_TEST_TARGET T join (SELECT id , in_date , sample FROM (SELECT id , in_date , sample ,ROW_NUMBER()
OVER(PARTITION BY id ORDER BY in_date DESC ) AS ROW_NUMB  FROM DUP_TEST) OUTQUERY WHERE ROW_NUMB =1) as S ON T.id = S.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dup_test
POSTHOOK: Input: default@dup_test_target
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_39]
        Map Join Operator [MAPJOIN_38] (rows=9 width=250)
          BucketMapJoin:true,Conds:RS_33._col0=SEL_37._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
        <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
          PARTITION_ONLY_SHUFFLE [RS_33]
            PartitionCols:_col0
            Select Operator [SEL_32] (rows=9 width=228)
              Output:["_col0","_col1","_col2"]
              Filter Operator [FIL_31] (rows=9 width=228)
                predicate:id is not null
                TableScan [TS_0] (rows=9 width=228)
                  default@dup_test_target,t, ACID table,Tbl:COMPLETE,Col:NONE,Output:["id","in_date","sample"]
        <-Select Operator [SEL_37] (rows=4 width=133)
            Output:["_col0","_col1","_col2"]
            Filter Operator [FIL_36] (rows=4 width=401)
              predicate:(ROW_NUMBER_window_0 = 1)
              PTF Operator [PTF_35] (rows=9 width=401)
                Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 DESC NULLS FIRST","partition by:":"_col0"}]
                Select Operator [SEL_34] (rows=9 width=401)
                  Output:["_col0","_col1","_col2"]
                <-Map 2 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_30]
                    PartitionCols:id
                    Filter Operator [FIL_29] (rows=9 width=133)
                      predicate:id is not null
                      TableScan [TS_3] (rows=9 width=133)
                        default@dup_test,dup_test, ACID table,Tbl:COMPLETE,Col:COMPLETE,Output:["id","in_date","sample"]

PREHOOK: query: select * from DUP_TEST_TARGET T join (SELECT id , in_date , sample FROM (SELECT id , in_date , sample ,ROW_NUMBER()
OVER(PARTITION BY id ORDER BY in_date DESC ) AS ROW_NUMB  FROM DUP_TEST) OUTQUERY WHERE ROW_NUMB =1) as S ON T.id = S.id
PREHOOK: type: QUERY
PREHOOK: Input: default@dup_test
PREHOOK: Input: default@dup_test_target
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from DUP_TEST_TARGET T join (SELECT id , in_date , sample FROM (SELECT id , in_date , sample ,ROW_NUMBER()
OVER(PARTITION BY id ORDER BY in_date DESC ) AS ROW_NUMB  FROM DUP_TEST) OUTQUERY WHERE ROW_NUMB =1) as S ON T.id = S.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dup_test
POSTHOOK: Input: default@dup_test_target
POSTHOOK: Output: hdfs://### HDFS PATH ###
2	2023-04-14 10:11:12.111	test2	2	2023-04-14 10:11:12.111	test2
3	2023-04-14 10:11:12.111	test3	3	2023-04-14 10:11:12.111	test3
6	2023-04-14 10:11:12.111	test6	6	2023-04-14 10:11:12.111	test6
7	2023-04-14 10:11:12.111	test7	7	2023-04-14 10:11:12.111	test7
1	2023-04-14 10:11:12.111	test1	1	2023-04-14 10:11:12.111	test1
4	2023-04-14 10:11:12.111	test4	4	2023-04-14 10:11:12.111	test4
5	2023-04-14 10:11:12.111	test5	5	2023-04-14 10:11:12.111	test5
8	2023-04-14 10:11:12.111	test8	8	2023-04-14 10:11:12.111	test8
9	2023-04-14 10:11:12.111	test9	9	2023-04-14 10:11:12.111	test9
PREHOOK: query: select * from DUP_TEST_TARGET T join DUP_TEST S ON T.id = S.id
PREHOOK: type: QUERY
PREHOOK: Input: default@dup_test
PREHOOK: Input: default@dup_test_target
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: select * from DUP_TEST_TARGET T join DUP_TEST S ON T.id = S.id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@dup_test
POSTHOOK: Input: default@dup_test_target
POSTHOOK: Output: hdfs://### HDFS PATH ###
1	2023-04-14 10:11:12.111	test1	1	2023-04-14 10:11:12.111	test1
8	2023-04-14 10:11:12.111	test8	8	2023-04-14 10:11:12.111	test8
4	2023-04-14 10:11:12.111	test4	4	2023-04-14 10:11:12.111	test4
5	2023-04-14 10:11:12.111	test5	5	2023-04-14 10:11:12.111	test5
3	2023-04-14 10:11:12.111	test3	3	2023-04-14 10:11:12.111	test3
7	2023-04-14 10:11:12.111	test7	7	2023-04-14 10:11:12.111	test7
9	2023-04-14 10:11:12.111	test9	9	2023-04-14 10:11:12.111	test9
2	2023-04-14 10:11:12.111	test2	2	2023-04-14 10:11:12.111	test2
6	2023-04-14 10:11:12.111	test6	6	2023-04-14 10:11:12.111	test6
